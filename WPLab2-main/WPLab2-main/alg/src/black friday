//package heap;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Scanner;

class Buyer implements Comparable<Buyer>{
    private final int entryInMinutes;
    private final int timeInterval;


    public Buyer(String part, String part1) {
        timeInterval = Integer.parseInt(part1);
        String[] parts = part.split(":");
        entryInMinutes = Integer.parseInt(parts[1]) + 60*Integer.parseInt(parts[0]);
    }

    public int getTotalTime(){
        return timeInterval + entryInMinutes;
    }

    @Override
    public int compareTo(Buyer o) {
        return Comparator.comparing(Buyer::getTotalTime).reversed().compare(this, o);
    }

    public boolean isInInterval(Buyer o){
        return getTotalTime() >= o.entryInMinutes;
    }

    @Override
    public String toString() {
        return "Buyer{" +
                "entryInMinutes=" + entryInMinutes +
                ", timeInterval=" + timeInterval +
                '}';
    }
}

public class BlackFriday {
    public static void main(String[] args) {
        Heap<Buyer> buyerHeap = new Heap<Buyer>(200);
            Scanner scanner = new Scanner(System.in);
            int n = scanner.nextInt();
            scanner.nextLine();
            for (int i = 0; i < n; i++) {
                String line = scanner.nextLine();
                String[] parts = line.split("\\s+");
                buyerHeap.insert(new Buyer(parts[0], parts[1]));
            }

            int max = 0, br = 1;
            for (int i = 0; i < n - 1; i++) {
                Buyer buyer = buyerHeap.removeMax();
                for (int j = 0; j < buyerHeap.getSize(); j++) {
                    if(buyer.isInInterval(buyerHeap.getAt(j)))
                        br++;
                }
                max = Math.max(max, br);
                br = 1;
            }
            System.out.println(max);

    }
}

 class Heap<E extends Comparable<E>> {

    private E[] elements;
    private int N;

    private Comparator<? super E> comparator;

    //with specific comparator or with normal
    private int compare (E k1, E k2) {
        return (comparator==null ? k1.compareTo(k2) : comparator.compare(k1, k2));
    }

    int getParent(int i) {
        return (i+1)/2-1;
    }

    public E getAt(int i) {
        return elements[i];
    }

    int getLeft(int i) {
        return (i+1)*2-1;
    }

    int getRight(int i) {
        return (i+1)*2;
    }

    void setElement(int index, E elem) {
        elements[index] = elem;
    }

    void swap(int i, int j) {
        E tmp = elements[i];
        elements[i] = elements[j];
        elements[j] = tmp;
    }

    void adjust(int i, int n){

        while (i < n) {

            int left = getLeft(i);
            int right = getRight(i);
            int largest = i;

            if ((left < n)&&(elements[left].compareTo(elements[largest]) > 0))
                largest = left;
            if ((right < n)&&(elements[right].compareTo(elements[largest]) > 0))
                largest = right;

            if (largest == i)
                break;

            swap(i, largest);
            i = largest;

        }

    }

    void buildHeap() {
        int i;
        for (i=elements.length/2-1;i>=0;i--)
            adjust(i, elements.length);
    }

    public void print(){
        for (int i = 0; i < N; i++) {
            System.out.println(elements[i]);
        }
    }

    public void heapSort(){
        E [] tmp = Arrays.copyOf(elements, elements.length);
        int size = tmp.length;
        while(size>0) {
            tmp[size-1] = elements[0];
            elements[0] = elements[size - 1];
            adjust(0, size);
            size--;
        }
        elements = tmp;
    }

    public Heap(int size) {
        elements = (E[]) new Comparable[size];
        N = 0;
    }

     public E removeMax() {
         if (N == 0)
             return null;
         E tmp = elements[0];
         elements[0] = elements[N-1];
         N--;
         adjust(0, N);
         return tmp;
     }

     public boolean insert(E elem) {
         if (N == elements.length)
             return false; // there is not enough space in the array
         elements[N] = elem;
         N++;
         adjustUp(N-1, N);
         return true;
     }

     void adjustUp(int i, int n){
         while (i > 0) {
             int parent = getParent(i);
             if (elements[i].compareTo(elements[parent]) <= 0) {
                 break;
             } else {
                 swap(i, parent);
                 i = parent;
             }
         }
     }

     public int getSize(){
        return  N;
     }

 }

