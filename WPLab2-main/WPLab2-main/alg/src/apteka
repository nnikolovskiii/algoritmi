//package aips_labs_6;

import java.io.*;
import java.util.*;

class Drug{
    private String name;
    private int price;
    private int num;
    private String isPositive;

    public Drug(String name, String isPositive, String price, String num) {
        this.name = name;
        this.price = Integer.parseInt(price);
        this.num = Integer.parseInt(num);
        int p = Integer.parseInt(isPositive);
        if(p == 0){
            this.isPositive = "NEG";
        }else {
            this.isPositive = "POZ";
        }
    }

    @Override
    public String toString() {
        return String.format("%s\n%s\n%d\n%d", name.toUpperCase(Locale.ROOT),isPositive, price , num);
    }

    public String getName() {
        return name;
    }

    public int getPrice() {
        return price;
    }

    public int getNum() {
        return num;
    }

    public String getIsPositive() {
        return isPositive;
    }

    public void setNum(int num) {
        this.num = num;
    }
}


public class Apteka {
    public static void main(String[] args) {
        //File file = new File("D:\\FINKI\\hashmaps\\src\\aips_labs_6\\routing");
        try {
            BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
            int n = Integer.parseInt(br.readLine());
            CBHT<String, Drug> cbht = new CBHT<>(n+10);
            String line;
            for (int i = 0; i < n; i++) {
                line = br.readLine();
                String [] parts = line.split("\\s+");
                cbht.insert(parts[0], new Drug(parts[0], parts[1], parts[2], parts[3]));
            }


            line = br.readLine();
            while(!line.equals("KRAJ")){
                String line2 = br.readLine();
                SLLNode<MapEntry<String,Drug>> container = cbht.search(line);
                if(container == null){
                    System.out.println("Nema takov lek");
                }else{
                    MapEntry<String, Drug> element = container.element;
                    System.out.println(element.getValue());
                    if(element.value.getNum() < Integer.parseInt(line2)){
                        System.out.println("Nema dovolno lekovi");
                    }else {
                        element.value.setNum(element.value.getNum() - Integer.parseInt(line2));
                        cbht.insert(element.key, element.value);
                        System.out.println("Napravena naracka");
                    }
                }
                line = br.readLine();
            }

        } catch (IOException e) {
            e.printStackTrace();
        }

    }
}

class SLLNode<E> {
    protected E element;
    protected SLLNode<E> succ;

    public SLLNode(E elem, SLLNode<E> succ) {
        this.element = elem;
        this.succ = succ;
    }

    @Override
    public String toString() {
        return element.toString();
    }
}

class MapEntry<K extends Comparable<K>,E> implements Comparable<K> {

    // Each MapEntry object is a pair consisting of a key (a Comparable
    // object) and a value (an arbitrary object).
    K key;
    E value;

    public MapEntry (K key, E val) {
        this.key = key;
        this.value = val;
    }

    public int compareTo (K that) {
        // Compare this map entry to that map entry.
        @SuppressWarnings("unchecked")
        MapEntry<K,E> other = (MapEntry<K,E>) that;
        return this.key.compareTo(other.key);
    }

    public String toString () {
        return "<" + key + "," + value + ">";
    }

    public K getKey() {
        return key;
    }

    public E getValue() {
        return value;
    }
}

class CBHT<K extends Comparable<K>, E> {

    // An object of class CBHT is a closed-bucket hash table, containing
    // entries of class MapEntry.
    private SLLNode<MapEntry<K,E>>[] buckets;

    @SuppressWarnings("unchecked")
    public CBHT(int m) {
        // Construct an empty CBHT with m buckets.
        buckets = (SLLNode<MapEntry<K,E>>[]) new SLLNode[m];
    }

    private int hash(K key) {
        // Translate key to an index of the array buckets.
        return Math.abs(((String) key).substring(0,3).toUpperCase(Locale.ROOT).hashCode()) % buckets.length;
    }

    public SLLNode<MapEntry<K,E>> search(K targetKey) {
        // Find which if any node of this CBHT contains an entry whose key is
        // equal
        // to targetKey. Return a link to that node (or null if there is none).
        String tk = (String) targetKey;
        int b = hash(targetKey);
        for (SLLNode<MapEntry<K,E>> curr = buckets[b]; curr != null; curr = curr.succ) {
            if (tk.equalsIgnoreCase((String) ((MapEntry<K, E>) curr.element).key))
                return curr;
        }
        return null;
    }

    public void insert(K key, E val) {		// Insert the entry <key, val> into this CBHT.
        MapEntry<K, E> newEntry = new MapEntry<K, E>(key, val);
        int b = hash(key);
        for (SLLNode<MapEntry<K,E>> curr = buckets[b]; curr != null; curr = curr.succ) {
            if (key.equals(((MapEntry<K, E>) curr.element).key)) {
                // Make newEntry replace the existing entry ...
                curr.element = newEntry;
                return;
            }
        }
        // Insert newEntry at the front of the 1WLL in bucket b ...
        buckets[b] = new SLLNode<MapEntry<K,E>>(newEntry, buckets[b]);
    }

    public void delete(K key) {
        // Delete the entry (if any) whose key is equal to key from this CBHT.
        int b = hash(key);
        for (SLLNode<MapEntry<K,E>> pred = null, curr = buckets[b]; curr != null; pred = curr, curr = curr.succ) {
            if (key.equals(((MapEntry<K,E>) curr.element).key)) {
                if (pred == null)
                    buckets[b] = curr.succ;
                else
                    pred.succ = curr.succ;
                return;
            }
        }
    }

    public String toString() {
        String temp = "";
        for (int i = 0; i < buckets.length; i++) {
            temp += i + ":";
            for (SLLNode<MapEntry<K,E>> curr = buckets[i]; curr != null; curr = curr.succ) {
                temp += curr.element.toString() + " ";
            }
            temp += "\n";
        }
        return temp;
    }

}








