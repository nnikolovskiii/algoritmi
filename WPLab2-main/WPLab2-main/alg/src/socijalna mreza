//package aud_11;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.*;

class GraphNode<E> {
    private int index;//index (reden broj) na temeto vo grafot
    private E info;
    private LinkedList<GraphNode<E>> neighbors;

    public GraphNode(int index, E info) {
        this.index = index;
        this.info = info;
        neighbors = new LinkedList<GraphNode<E>>();
    }

    boolean containsNeighbor(GraphNode<E> o){
        return neighbors.contains(o);
    }

    void addNeighbor(GraphNode<E> o){
        neighbors.add(o);
    }


    void removeNeighbor(GraphNode<E> o){
        if(neighbors.contains(o))
            neighbors.remove(o);
    }


    @Override
    public String toString() {
        String ret= "INFO:"+info+" SOSEDI:";
        for(int i=0;i<neighbors.size();i++)
            ret+=neighbors.get(i).info+" ";
        return ret;

    }

    @Override
    public boolean equals(Object obj) {
        @SuppressWarnings("unchecked")
        GraphNode<E> pom = (GraphNode<E>)obj;
        return (pom.info.equals(this.info));
    }

    public int getIndex() {
        return index;
    }

    public void setIndex(int index) {
        this.index = index;
    }

    public E getInfo() {
        return info;
    }

    public void setInfo(E info) {
        this.info = info;
    }

    public LinkedList<GraphNode<E>> getNeighbors() {
        return neighbors;
    }

    public void setNeighbors(LinkedList<GraphNode<E>> neighbors) {
        this.neighbors = neighbors;
    }



}

 class Graph<E> {

    int num_nodes;
    GraphNode<E> nodes[];

    @SuppressWarnings("unchecked")
    public Graph(int num_nodes, E[] list) {
        this.num_nodes = num_nodes;
        nodes = (GraphNode<E>[]) new GraphNode[num_nodes];
        for (int i = 0; i < num_nodes; i++)
            nodes[i] = new GraphNode<E>(i, list[i]);
    }

    @SuppressWarnings("unchecked")
    public Graph(int num_nodes) {
        this.num_nodes = num_nodes;
        nodes = (GraphNode<E>[]) new GraphNode[num_nodes];
        for (int i = 0; i < num_nodes; i++)
            nodes[i] = new GraphNode<E>(i, null);
    }

    int adjacent(int x, int y) {
        // proveruva dali ima vrska od jazelot so
        // indeks x do jazelot so indeks y
        return (nodes[x].containsNeighbor(nodes[y])) ? 1 : 0;
    }

    void addEdge(int x, int y) {
        // dodava vrska od jazelot so indeks x do jazelot so indeks y
        if (!nodes[x].containsNeighbor(nodes[y])) {
            nodes[x].addNeighbor(nodes[y]);
        }
    }

    void deleteEdge(int x, int y) {
        nodes[x].removeNeighbor(nodes[y]);
    }

    /************************TOPOLOGICAL SORT*******************************************************************/

    void dfsVisit(Stack<Integer> s, int i, boolean[] visited){
        if(!visited[i]){
            visited[i] = true;
            Iterator<GraphNode<E>> it = nodes[i].getNeighbors().iterator();
            System.out.println("dfsVisit: "+i+" Stack="+s);
            while(it.hasNext()){
                dfsVisit(s, it.next().getIndex(), visited);
            }
            s.push(i);
            System.out.println("--dfsVisit: "+i+" Stack="+s);
        }
    }

    void topological_sort_dfs(){
        boolean visited[] = new boolean[num_nodes];
        for(int i=0;i<num_nodes;i++){
            visited[i] = false;
        }

        Stack<Integer> s = new Stack<Integer>();

        for(int i=0;i<num_nodes;i++){
            dfsVisit(s,i,visited);
        }
        System.out.println("----Stack="+s);
        while(!s.isEmpty()){
            System.out.println(nodes[s.pop()]);
        }
    }

    /***********************************************************************************************************/

    @Override
    public String toString() {
        String ret = new String();
        for (int i = 0; i < this.num_nodes; i++)
            ret += i + ": " + nodes[i] + "\n";
        return ret;
    }

    public int calculateNumOfFriendsDFS(int start_index, int end_index) {
        boolean [] visited = new boolean[num_nodes];
        Stack<Integer> stack = new Stack<>();
        stack.push(start_index);
        visited[start_index] = true;
        int count = 0;

        while(!stack.isEmpty()&&stack.peek()!=end_index){
            int pom  = stack.peek();
            Iterator<GraphNode<E>> iterator = nodes[pom].getNeighbors().iterator();

            while(iterator.hasNext()){
                pom = iterator.next().getIndex();
                if(!visited[pom]) {
                    stack.push(pom);
                    break;
                }
            }

            if(!visited[pom])
                visited[pom] = true;
            else
                stack.pop();
        }

        while(!stack.isEmpty()){
            count++;
            System.out.println(stack.pop());
        }
        return count-1;
    }

     public int calculateNumOfFriends(int start_index, int end_index) {
        boolean [] found = new boolean[num_nodes];
        int [] dist = new int[num_nodes];
        for (int i = 0; i < dist.length; i++) {
             dist[i] = -1;
        }
        int ind = start_index;
        dist[ind] = 0;
        found[ind] = true;
         ArrayList<GraphNode<E>> notFoundNeighbours = new ArrayList<>();

        while(!found[end_index]){
            Iterator<GraphNode<E>> iterator = nodes[ind].getNeighbors().iterator();
            while(iterator.hasNext()){
                int pom = iterator.next().getIndex();
                if(!found[pom]) {
                    notFoundNeighbours.add(nodes[pom]);
                    if (dist[pom] == -1)
                        dist[pom] = dist[ind] + 1;
                    else if (dist[pom] > dist[ind] + 1)
                        dist[pom] = dist[ind] + 1;
                }
            }

            found[ind = findMinDistanceIndex(notFoundNeighbours, dist)] = true;
            notFoundNeighbours.remove(nodes[ind]);
        }

        return dist[end_index] ;
     }

     private int findMinDistanceIndex(ArrayList<GraphNode<E>> notFoundNeighbours,
                                       int[] dist) {
        HashMap<Integer, Integer> map = new HashMap<>();
        notFoundNeighbours.stream().forEach(node->{
            int ind = node.getIndex();
            map.put(dist[ind], ind);
        });
         Integer min =
                 notFoundNeighbours.stream().mapToInt(node->dist[node.getIndex()]).min().getAsInt();
         return map.get(min);
     }
 }


class User{
    private String name;
    private String surname;

    public User( String name, String surname) {
        this.name = name;
        this.surname = surname;
    }

    public String getName() {
        return name;
    }

    public String getSurname() {
        return surname;
    }

    @Override
    public String toString() {
        return "User{" +
                "name='" + name + '\'' +
                ", surname='" + surname + '\'' +
                '}';
    }
}

public class CountFacebookFriends {

    public static void main(String[] args) {
        //File file = new File("D:\\FINKI\\graf\\src\\aud_11\\input");
        //try {
            Scanner scanner = new Scanner(System.in);
            int n = scanner.nextInt();
            Graph<User> users = new Graph<User>(n);

            boolean [] filled = new boolean[n];
            for (int i = 0; i < n; i++) {
                int m = scanner.nextInt();
                scanner.nextLine();
                for (int j = 0; j < m; j++) {
                    String [] parts = scanner.nextLine().split("\\s+");
                    int ind = Integer.parseInt(parts[0]);
                    users.addEdge(i,ind);
                    if(!filled[ind]){
                        filled[ind] = true;
                        users.nodes[ind].setIndex(ind);
                        users.nodes[ind].setInfo(new User(parts[1], parts[2]));
                    }
                }
            }

            int start_index = scanner.nextInt();
            int end_index = scanner.nextInt();
            //System.out.println(users.calculateNumOfFriendsDFS(start_index, end_index));
            System.out.println(users.calculateNumOfFriends(start_index, end_index));
       // } catch (FileNotFoundException e) {
         //   e.printStackTrace();
       // }
    }
}
