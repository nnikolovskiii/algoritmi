import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.NoSuchElementException;

public class CheckXML {

    public static void main(String[] args) throws Exception{

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String s = br.readLine();
        int n = Integer.parseInt(s);
        String [] redovi = new String[n];

        for(int i=0;i<n;i++)
            redovi[i] = br.readLine();


        // Vasiot kod tuka
        // Moze da koristite dopolnitelni funkcii ako vi se potrebni

        System.out.println(checkCorrectXML(redovi));

        br.close();
    }

    private static int checkCorrectXML(String[] redovi) {
        ArrayStack<String> openingTags = new ArrayStack<>(100);
        for (int i = 0; i < redovi.length; i++) {
            String red = redovi[i];
            if(isOpeningTag(red)){
                openingTags.push(red);
            }
            if(isClosingTag(red)){
                String prev = openingTags.peek();
                if(equalTags(red, prev)){
                    openingTags.pop();
                }else{
                    return  0;
                }
            }
        }

        if(!openingTags.isEmpty())
            return  0;

        return 1;
    }

    private static boolean isClosingTag(String red) {
        return red.charAt(0) == '['&&red.charAt(1) =='/';
    }

    private static boolean equalTags(String red, String prev) {
        if(red.length()-1 != prev.length())
            return false;

        for (int i = 1; i < prev.length(); i++) {
            if(prev.charAt(i) != red.charAt(i+1))
                return false;
        }

        return true;
    }

    private static boolean isOpeningTag(String red) {
        return red.charAt(0) =='['&&red.charAt(1) != '/';
    }

     static class ArrayStack<E> implements Stack<E> {

        // Stekot e pretstaven na sledniot nacin:
        //depth e dlabochinata na stekot, a
        // elems[0...depth-1] se negovite elementi.
        private E[] elems;
        private int depth;

        @SuppressWarnings("unchecked")
        public ArrayStack(int maxDepth) {
            // Konstrukcija na nov, prazen stek.
            elems = (E[]) new Object[maxDepth];
            depth = 0;
        }


        public boolean isEmpty () {
            // Vrakja true ako i samo ako stekot e prazen.
            return (depth == 0);
        }


        public E peek () {
            // Go vrakja elementot na vrvot od stekot.
            if (depth == 0)
                throw new NoSuchElementException();
            return elems[depth-1];
        }


        public void clear () {
            // Go prazni stekot.
            for (int i = 0; i < depth; i++)  elems[i] = null;
            depth = 0;
        }


        public void push (E x) {
            // Go dodava x na vrvot na stekot.
            elems[depth++] = x;
        }


        public E pop () {
            // Go otstranuva i vrakja elementot shto e na vrvot na stekot.
            if (depth == 0)
                throw new NoSuchElementException();
            E topmost = elems[--depth];
            elems[depth] = null;
            return topmost;
        }
    }

     static interface Stack<E> {

        // Elementi na stekot se objekti od proizvolen tip.

        // Metodi za pristap:

        public boolean isEmpty ();
            // Vrakja true ako i samo ako stekot e prazen.

        public E peek ();
            // Go vrakja elementot na vrvot od stekot.

        // Metodi za transformacija:

        public void clear ();
            // Go prazni stekot.

        public void push (E x);
            // Go dodava x na vrvot na stekot.

        public E pop ();
            // Go otstranuva i vrakja elementot shto e na vrvot na stekot.
    }
}