import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

class SLLNode<E extends Comparable<E>> implements Comparable<E>{
    protected E data;
    protected SLLNode<E> succ;

    public SLLNode(E data, SLLNode<E> succ) {
        this.data = data;
        this.succ = succ;
    }

    public SLLNode(){
        succ = null;
    }

    public E getData() {
        return data;
    }

    public SLLNode<E> getSucc() {
        return succ;
    }

    @Override
    public int compareTo(E o) {
        return this.data.compareTo(o);
    }
}


class SLL<E extends Comparable<E>>{
    protected SLLNode<E> first;

    public SLL(SLLNode<E> first) {
        this.first = first;
    }

    public SLL(){
        first = null;
    }

    public void insertFirst(E o){
        SLLNode<E> node = new SLLNode<>(o, null);
        first = node;
    }

    public void insertLast(E o){
        if(first == null){
            insertFirst(o);
        }else {
            SLLNode<E> tmp = first;
            while(tmp.succ != null)
                tmp = tmp.succ;
            SLLNode<E> node = new SLLNode<>(o, null);
            tmp.succ = node;
        }
    }

    @Override
    public String toString() {
        String r = new String();
        SLLNode<E> tmp = first;
        while(tmp != null){
            r += String.format(String.valueOf(tmp.data) + " ");
            tmp = tmp.succ;
        }
        return r;
    }

    public SLL<E> joinLists(SLL<E> list) {
        SLL<E> result = new SLL<>();
        this.removeDuplicates();
        list.removeDuplicates();
        SLLNode<E> tmp1 = first;
        SLLNode<E> tmp2 = list.first;

        while(tmp1 != null&&tmp2!= null){
            if(tmp1.data.compareTo(tmp2.data) <0){
                result.insertLast(tmp1.data);
                tmp1 = tmp1.succ;
            }else if(tmp1.data.compareTo(tmp2.data) >0){
                result.insertLast(tmp2.data);
                tmp2 = tmp2.succ;
            }else{
                result.insertLast(tmp1.data);
                tmp1 = tmp1.succ;
                tmp2 = tmp2.succ;
            }
        }

        while(tmp1 != null){
            result.insertLast(tmp1.data);
            tmp1 = tmp1.succ;
        }

        while(tmp2 != null){
            result.insertLast(tmp2.data);
            tmp2 = tmp2.succ;
        }

        return result;
    }

    public void deleteNext(SLLNode<E> node){
        node.succ = node.succ.succ;
    }

    public void deleteFirst(){
        if(first == null)
            return;
        first = first.succ;
    }

    public void removeDuplicates(){
        SLLNode<E> tmp = first;
        while(tmp.succ!=null){
            if(tmp.data.equals(tmp.succ.data)){
                deleteNext(tmp);
            }else{
                tmp = tmp.succ;
            }
        }
    }





}


public class SpecialSLLJoin {
    public static void main(String[] args) throws IOException {
        SLL<Integer> spoeni = new SLL<>();
        SLL<Integer> lista1 = new SLL<>();
        SLL<Integer> lista2 = new SLL<>();

        BufferedReader stdin = new BufferedReader(new InputStreamReader(
                System.in));
        String s = stdin.readLine();
        int N = Integer.parseInt(s);
        s = stdin.readLine();
        String[] pomniza = s.split(" ");
        for (int i = 0; i < N; i++) {
            lista1.insertLast(Integer.parseInt(pomniza[i]));
        }

        s = stdin.readLine();
        N = Integer.parseInt(s);
        s = stdin.readLine();
        pomniza = s.split(" ");
        for (int i = 0; i < N; i++) {
            lista2.insertLast(Integer.parseInt(pomniza[i]));
        }

        spoeni = specialJoin(lista1,lista2);
        System.out.println(spoeni);

    }

    private static SLL<Integer> specialJoin(SLL<Integer> lista1, SLL<Integer> lista2) {
        SLL<Integer> results = new SLL<>();
        SLLNode<Integer> tmp1 = lista1.first;
        SLLNode<Integer> tmp2 = lista2.first;

        while(tmp1 == null && tmp2 ==null && tmp1.succ !=null && tmp2.succ !=null){
            results.insertLast(tmp1.data);
            results.insertLast(tmp1.succ.data);
            results.insertLast(tmp2.data);
            results.insertLast(tmp2.succ.data);
            tmp1 = tmp1.succ.succ;
            tmp2 = tmp2.succ.succ;
        }


        while(tmp1 !=null){
            results.insertLast(tmp1.data);
            tmp1 = tmp1.succ;
        }

        while(tmp2 !=null){
            results.insertLast(tmp2.data);
            tmp2 = tmp2.succ;
        }

        return results;
    }

}
