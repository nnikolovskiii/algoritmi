//package connectedTree;

import java.io.*;
import java.util.*;

public class ConsecutiveNumbers {

    public static void main(String[] args) {
        //File file = new File("D:\\FINKI\\drva\\src\\connectedTree\\consecutive");
        BTree<Integer> bTree = new BTree<>();
        Map<Integer, BTree.BNode<Integer>> bNodes= new HashMap<>();

            BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));
            bf.lines().skip(1).forEach(line->{
                String [] parts = line.split("\\s+");
                Integer e = Integer.parseInt(parts[1]);
                int key = Integer.parseInt(parts[0]);
                int parentKey = 0;
                if(parts.length == 4){
                    parentKey = Integer.parseInt(parts[3]);
                }
                if(parts[2].equals("ROOT")) {
                    bNodes.put(key, bTree.makeRoot(e));
                }
                else if(parts[2].equals("LEFT"))
                    bNodes.put(key, bTree.addChild(bNodes.get(parentKey), 1, e));
                else if(parts[2].equals("RIGHT"))
                    bNodes.put(key, bTree.addChild(bNodes.get(parentKey), 2, e));


            });
            System.out.println(bTree.inorderNonRecursive());


    }

     static class BTree<E extends Comparable<E>> {

        public BNode<E> head;

        public BTree() {
            head = new BNode<E>(null);
            // po definicija ako nema koren, t.e. ako stebloto e prazno
            head.left = head;
            head.ltag = '-';
            // kaj vodacot sekogas desnata vrska pokazuva kon samiot sebe
            head.right = head;
            head.rtag = '+';
        }

        public BNode<E> makeRoot(E elem) {
            BNode<E> tmp = new BNode<E>(elem);
            head.left = tmp;
            head.ltag = '+';

            tmp.left = head;
            tmp.ltag = '-';
            tmp.right = head;
            tmp.rtag = '-';

            return tmp;
        }

        public BNode<E> addChild(BNode<E> node, int where, E elem) {
            BNode<E> tmp = new BNode<E>(elem);

            if (where == BNode.LEFT) {

                if (node.ltag == '+')   // veke postoi element
                    return null;

                tmp.left = node.left;
                tmp.ltag = '-';
                tmp.right = node;
                tmp.rtag = '-';
                node.left = tmp;
                node.ltag = '+';
            } else {

                if (node.rtag == '+')   // veke postoi element
                    return null;

                tmp.right = node.right;
                tmp.rtag = '-';
                tmp.left = node;
                tmp.ltag = '-';
                node.right = tmp;
                node.rtag = '+';
            }

            return tmp;
        }

        public BNode<E> insertRight(BNode<E> parent, E info) {

            BNode<E> child = new BNode<E>(info);

            child.ltag = '-';
            child.left = parent;
            child.rtag = parent.rtag;
            child.right = parent.right;

            parent.right = child;
            parent.rtag = '+';

            if (child.rtag == '+') {
                BNode<E> temp = child.right;
                while (temp.ltag == '+')
                    temp = temp.left;
                temp.left = child;
            }

            return child;
        }

        public BNode<E> predecessorInorder(BNode<E> node) {

            if (node.ltag == '-')
                return node.left;

            BNode<E> p = node.left;
            while (p.rtag == '+')
                p = p.right;

            return p;
        }

        public BNode<Integer> successorInorder(BNode<Integer> node) {
            if(node.rtag == '-')
                return node.right;

            BNode<Integer> tmp = node.right;
            while(tmp.ltag != '-')
                tmp = tmp.left;
            return tmp;
        }

        public boolean inorderNonRecursive() {
            BNode<Integer> tmp = (BNode<Integer>) head.left;
            BNode<Integer> tmp1 = null;
            char c = tmp.ltag;
            while(tmp.ltag == '+'){
                tmp = tmp.left;
            }

            while(successorInorder(tmp) != head){
                tmp1 = successorInorder(tmp);
                if(tmp1.info - tmp.info != 1)
                    return false;
                tmp = successorInorder(tmp);
            }
            return true;
        }

        public void inorder() {
            System.out.print("INORDER: ");

            if (head.ltag == '+')
                inorderR(head.left);

            System.out.println();
        }

        void inorderR(BNode<E> n) {

            if (n.ltag == '+')
                inorderR(n.left);

            System.out.print(n.info.toString()+" ");

            if (n.rtag == '+')
                inorderR(n.right);

            System.out.println();

        }

        public void preorder() {
            System.out.print("PREORDER: ");

            if (head.ltag == '+')
                preorderR(head.left);

            System.out.println();
        }

        void preorderR(BNode<E> n) {

            System.out.print(n.info.toString()+" ");

            if (n.ltag == '+')
                preorderR(n.left);

            if (n.rtag == '+')
                preorderR(n.right);

        }

        BNode<E> successorPreorder(BNode<E> node) {
            if (node.ltag == '+')
                return node.left;
            if (node.rtag == '+')
                return node.right;

            // ako nema nitu levo nitu desno potsteblo, n–∞slednik e korenot
            // na desnoto potsteblo vo cie levo posteblo se naoga p
            // (se odi se po niski dodeka ne se dojde do vrska)
            BNode<E> p = node;
            while (p.rtag == '-')
                p = p.right;

            if (p == head)
                return head;    // sme stignale do vodacot, moze, no i ne mora
            else
                return p.right;
        }

         public void preorderNonRecursive() {
             if (head.ltag == '-')      // drvoto e prazno
                 return;

             System.out.print("PREORDER (nonrecursive): ");

             BNode<E> p = head.left;

             while (p != head) {
                 System.out.print(p.info.toString()+" ");
                 p = successorPreorder(p);
            }
            System.out.println();
         }

        public void postorder() {
            System.out.print("POSTORDER: ");

            if (head.ltag == '+')
                postorderR(head.left);

            System.out.println();
        }

        void postorderR(BNode<E> n) {

            if (n.ltag == '+')
                postorderR(n.left);

            if (n.rtag == '+')
                postorderR(n.right);

            System.out.print(n.info.toString()+" ");

        }

        BNode<E> predecessorPostorder(BNode<E> node) {
            if (node.rtag == '+')
                return node.right;
            while (node.ltag == '-')
                node = node.left;
            return node.left;
        }

        public void postorderOppNonRecursive() {
            if (head.ltag == '-')      // drvoto e prazno
                 return;

             System.out.print("POSTORDER OPPOSITE (nonrecursive): ");

             BNode<E> p = head.left;

             while (true) {
                 System.out.print(p.info.toString()+" ");
                 p = predecessorPostorder(p);
                 if (p == head.left)
                     break;
             }
             System.out.println();

        }

         static class BNode<E extends Comparable<E>> {

            public E info;
            public BNode<E> left;
            public BNode<E> right;
            char ltag;
            char rtag;

            static int LEFT = 1;
            static int RIGHT = 2;

            public BNode(E info) {
                this.info = info;
                left = null;
                right = null;
                ltag = '-';
                rtag = '-';
            }

             @Override
             public String toString() {
                 return "BNode{" +
                         "info=" + info +
                         '}';
             }
         }
    }
}
